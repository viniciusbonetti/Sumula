{"ast":null,"code":"import { create } from 'nouislider';\nimport { Component, ElementRef, EventEmitter, Input, NgModule, NgZone, Output, Renderer2, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\n\nclass DefaultFormatter {\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  to(value) {\n    // formatting with http://stackoverflow.com/a/26463364/478584\n    return String(parseFloat(parseFloat(String(value)).toFixed(2)));\n  }\n\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  from(value) {\n    return parseFloat(value);\n  }\n\n}\n\nlet NouisliderComponent = /*#__PURE__*/(() => {\n  class NouisliderComponent {\n    /**\n     * @param {?} ngZone\n     * @param {?} el\n     * @param {?} renderer\n     */\n    constructor(ngZone, el, renderer) {\n      this.ngZone = ngZone;\n      this.el = el;\n      this.renderer = renderer;\n      this.config = {};\n      this.change = new EventEmitter(true);\n      this.update = new EventEmitter(true);\n      this.slide = new EventEmitter(true);\n      this.set = new EventEmitter(true);\n      this.start = new EventEmitter(true);\n      this.end = new EventEmitter(true);\n      this.onChange = Function.prototype;\n      this.cleanups = [];\n\n      this.eventHandler = (emitter, values, handle, unencoded) => {\n        let\n        /** @type {?} */\n        v = this.toValues(values);\n        let\n        /** @type {?} */\n        emitEvents = false;\n\n        if (this.value === undefined) {\n          this.value = v;\n          return;\n        }\n\n        if (Array.isArray(v) && this.value[handle] != v[handle]) {\n          emitEvents = true;\n        }\n\n        if (!Array.isArray(v) && this.value != v) {\n          emitEvents = true;\n        }\n\n        if (emitEvents) {\n          this.ngZone.run(() => {\n            if (emitter.observers.length > 0) {\n              emitter.emit(v);\n            }\n\n            this.onChange(v);\n          });\n        }\n\n        if (Array.isArray(v)) {\n          this.value[handle] = v[handle];\n        } else {\n          this.value = v;\n        }\n      };\n\n      this.defaultKeyHandler = e => {\n        let\n        /** @type {?} */\n        stepSize = this.slider.steps();\n        let\n        /** @type {?} */\n        index = parseInt(e.target.getAttribute('data-handle'));\n        let\n        /** @type {?} */\n        sign = 1;\n        let\n        /** @type {?} */\n        multiplier = 1;\n        let\n        /** @type {?} */\n        step = 0;\n        let\n        /** @type {?} */\n        delta = 0;\n\n        switch (e.which) {\n          case 34:\n            // PageDown\n            multiplier = this.config.pageSteps;\n\n          case 40: // ArrowDown\n\n          case 37:\n            // ArrowLeft\n            sign = -1;\n            step = stepSize[index][0];\n            e.preventDefault();\n            break;\n\n          case 33:\n            // PageUp\n            multiplier = this.config.pageSteps;\n\n          case 38: // ArrowUp\n\n          case 39:\n            // ArrowRight\n            step = stepSize[index][1];\n            e.preventDefault();\n            break;\n\n          default:\n            break;\n        }\n\n        delta = sign * multiplier * step;\n        let\n        /** @type {?} */\n        newValue;\n\n        if (Array.isArray(this.value)) {\n          newValue = [].concat(this.value);\n          newValue[index] = newValue[index] + delta;\n        } else {\n          newValue = this.value + delta;\n        }\n\n        this.slider.set(newValue);\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      let\n      /** @type {?} */\n      inputsConfig = JSON.parse(JSON.stringify({\n        behaviour: this.behaviour,\n        connect: this.connect,\n        limit: this.limit,\n        start: this.formControl !== undefined ? this.formControl.value : this.ngModel,\n        step: this.step,\n        pageSteps: this.pageSteps,\n        keyboard: this.keyboard,\n        onKeydown: this.onKeydown,\n        range: this.range || this.config.range || {\n          min: this.min,\n          max: this.max\n        },\n        tooltips: this.tooltips,\n        snap: this.snap,\n        animate: this.animate\n      }));\n      inputsConfig.tooltips = this.tooltips || this.config.tooltips;\n      inputsConfig.format = this.format || this.config.format || new DefaultFormatter();\n      this.ngZone.runOutsideAngular(() => {\n        this.slider = create(this.el.nativeElement.querySelector('div'), Object.assign(this.config, inputsConfig));\n      });\n      this.handles = [].slice.call(this.el.nativeElement.querySelectorAll('.noUi-handle'));\n\n      if (this.config.keyboard) {\n        if (this.config.pageSteps === undefined) {\n          this.config.pageSteps = 10;\n        }\n\n        for (const\n        /** @type {?} */\n        handle of this.handles) {\n          handle.setAttribute('tabindex', 0);\n          const\n          /** @type {?} */\n          onKeydown = this.config.onKeydown || this.defaultKeyHandler;\n          this.ngZone.runOutsideAngular(() => {\n            this.cleanups.push(this.renderer.listen(handle, 'keydown', onKeydown), this.renderer.listen(handle, 'click', () => {\n              handle.focus();\n            }));\n          });\n        }\n      }\n\n      this.slider.on('set', (values, handle, unencoded) => {\n        this.eventHandler(this.set, values, handle, unencoded);\n      });\n      this.slider.on('update', (values, handle, unencoded) => {\n        if (this.update.observers.length > 0) {\n          this.ngZone.run(() => {\n            this.update.emit(this.toValues(values));\n          });\n        }\n      });\n      this.slider.on('change', (values, handle, unencoded) => {\n        if (this.change.observers.length > 0) {\n          this.ngZone.run(() => {\n            this.change.emit(this.toValues(values));\n          });\n        }\n      });\n      this.slider.on('slide', (values, handle, unencoded) => {\n        this.eventHandler(this.slide, values, handle, unencoded);\n      });\n      this.slider.on('start', (values, handle, unencoded) => {\n        if (this.start.observers.length > 0) {\n          this.ngZone.run(() => {\n            this.start.emit(this.toValues(values));\n          });\n        }\n      });\n      this.slider.on('end', (values, handle, unencoded) => {\n        if (this.end.observers.length > 0) {\n          this.ngZone.run(() => {\n            this.end.emit(this.toValues(values));\n          });\n        }\n      });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      if (this.slider && (changes.min || changes.max || changes.step || changes.range)) {\n        this.ngZone.runOutsideAngular(() => {\n          setTimeout(() => {\n            this.slider.updateOptions({\n              range: Object.assign({}, {\n                min: this.min,\n                max: this.max\n              }, this.range || {}),\n              step: this.step\n            });\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.slider.destroy();\n\n      while (this.cleanups.length) {\n        this.cleanups.pop()();\n      }\n    }\n    /**\n     * @param {?} values\n     * @return {?}\n     */\n\n\n    toValues(values) {\n      let\n      /** @type {?} */\n      v = values.map(this.config.format.from);\n      return v.length == 1 ? v[0] : v;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      if (this.slider) {\n        this.ngZone.runOutsideAngular(() => {\n          setTimeout(() => {\n            this.slider.set(value);\n          });\n        });\n      }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {}\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    setDisabledState(isDisabled) {\n      isDisabled ? this.renderer.setAttribute(this.el.nativeElement.childNodes[0], 'disabled', 'true') : this.renderer.removeAttribute(this.el.nativeElement.childNodes[0], 'disabled');\n    }\n\n  }\n\n  NouisliderComponent.ɵfac = function NouisliderComponent_Factory(t) {\n    return new (t || NouisliderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  NouisliderComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NouisliderComponent,\n    selectors: [[\"nouislider\"]],\n    hostVars: 2,\n    hostBindings: function NouisliderComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ng2-nouislider\", true);\n      }\n    },\n    inputs: {\n      config: \"config\",\n      disabled: \"disabled\",\n      behaviour: \"behaviour\",\n      connect: \"connect\",\n      limit: \"limit\",\n      min: \"min\",\n      max: \"max\",\n      snap: \"snap\",\n      animate: \"animate\",\n      range: \"range\",\n      step: \"step\",\n      format: \"format\",\n      pageSteps: \"pageSteps\",\n      ngModel: \"ngModel\",\n      keyboard: \"keyboard\",\n      onKeydown: \"onKeydown\",\n      formControl: \"formControl\",\n      tooltips: \"tooltips\"\n    },\n    outputs: {\n      change: \"change\",\n      update: \"update\",\n      slide: \"slide\",\n      set: \"set\",\n      start: \"start\",\n      end: \"end\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NouisliderComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    template: function NouisliderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled ? true : undefined);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n      display: block;\\n      margin-top: 1rem;\\n      margin-bottom: 1rem;\\n    }\"]\n  });\n  /**\n   * @nocollapse\n   */\n\n  return NouisliderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NouisliderModule = /*#__PURE__*/(() => {\n  class NouisliderModule {}\n\n  NouisliderModule.ɵfac = function NouisliderModule_Factory(t) {\n    return new (t || NouisliderModule)();\n  };\n\n  NouisliderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NouisliderModule\n  });\n  NouisliderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  /**\n   * @nocollapse\n   */\n\n  return NouisliderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NouisliderModule, {\n    declarations: [NouisliderComponent],\n    exports: [NouisliderComponent]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DefaultFormatter, NouisliderComponent, NouisliderModule }; //# sourceMappingURL=ng2-nouislider.js.map","map":null,"metadata":{},"sourceType":"module"}