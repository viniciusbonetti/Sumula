{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Output, Input, Injectable, ContentChildren, ContentChild, HostListener, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\nfunction Ng2DropdownButton_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 3);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 4);\n    i0.ɵɵelement(2, \"path\", 5)(3, \"g\")(4, \"g\")(5, \"g\")(6, \"g\")(7, \"g\")(8, \"g\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst _c0 = [\"*\"];\n\nfunction Ng2DropdownMenu_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function Ng2DropdownMenu_div_3_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.hide());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = [[[\"ng2-dropdown-button\"]], [[\"ng2-dropdown-menu\"]]];\nconst _c2 = [\"ng2-dropdown-button\", \"ng2-dropdown-menu\"];\nlet Ng2DropdownButton = /*#__PURE__*/(() => {\n  class Ng2DropdownButton {\n    constructor(element) {\n      this.element = element;\n      this.onMenuToggled = new EventEmitter();\n      this.showCaret = true;\n    }\n    /**\n     * @name toggleMenu\n     * @desc emits event to toggle menu\n     */\n\n\n    toggleMenu() {\n      this.onMenuToggled.emit(true);\n    }\n    /**\n     * @name getPosition\n     * @desc returns position of the button\n     */\n\n\n    getPosition() {\n      return this.element.nativeElement.getBoundingClientRect();\n    }\n\n  }\n\n  Ng2DropdownButton.ɵfac = function Ng2DropdownButton_Factory(t) {\n    return new (t || Ng2DropdownButton)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  Ng2DropdownButton.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Ng2DropdownButton,\n    selectors: [[\"ng2-dropdown-button\"]],\n    inputs: {\n      showCaret: \"showCaret\"\n    },\n    outputs: {\n      onMenuToggled: \"onMenuToggled\"\n    },\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 1,\n    consts: [[\"type\", \"button\", \"tabindex\", \"0s\", 1, \"ng2-dropdown-button\", 3, \"click\"], [1, \"ng2-dropdown-button__label\"], [\"class\", \"ng2-dropdown-button__caret\", 4, \"ngIf\"], [1, \"ng2-dropdown-button__caret\"], [\"enable-background\", \"new 0 0 32 32\", \"height\", \"16px\", \"id\", \"\\u0421\\u043B\\u043E\\u0439_1\", \"version\", \"1.1\", \"viewBox\", \"0 0 32 32\", \"width\", \"16px\", 0, \"xml\", \"space\", \"preserve\", \"xmlns\", \"http://www.w3.org/2000/svg\", 0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\"], [\"d\", \"M24.285,11.284L16,19.571l-8.285-8.288c-0.395-0.395-1.034-0.395-1.429,0  c-0.394,0.395-0.394,1.035,0,1.43l8.999,9.002l0,0l0,0c0.394,0.395,1.034,0.395,1.428,0l8.999-9.002  c0.394-0.395,0.394-1.036,0-1.431C25.319,10.889,24.679,10.889,24.285,11.284z\", \"fill\", \"#121313\", \"id\", \"Expand_More\"]],\n    template: function Ng2DropdownButton_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function Ng2DropdownButton_Template_button_click_0_listener() {\n          return ctx.toggleMenu();\n        });\n        i0.ɵɵelementStart(1, \"span\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, Ng2DropdownButton_span_3_Template, 9, 0, \"span\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCaret);\n      }\n    },\n    dependencies: [i1.NgIf],\n    styles: [\".ng2-dropdown-button[_ngcontent-%COMP%]{font-family:Roboto,Helvetica Neue,Helvetica,Arial;background:#fff;padding:.45rem .25rem;font-size:14px;letter-spacing:.08rem;color:#444;outline:0;cursor:pointer;font-weight:400;border:none;border-bottom:1px solid #efefef;text-align:left;min-width:100px;width:100%;display:flex;flex-direction:row;max-width:150px}.ng2-dropdown-button[_ngcontent-%COMP%]:hover{color:#222}.ng2-dropdown-button[_ngcontent-%COMP%]:active, .ng2-dropdown-button[_ngcontent-%COMP%]:focus{color:#222;border-bottom:2px solid #2196F3}.ng2-dropdown-button__label[_ngcontent-%COMP%]{flex:1 1 95%}.ng2-dropdown-button__caret[_ngcontent-%COMP%]{width:12px;height:12px;display:flex;flex:1 1 6%}.ng2-dropdown-button--icon[_nghost-%COMP%]   .ng2-dropdown-button[_ngcontent-%COMP%], .ng2-dropdown-button--icon   [_nghost-%COMP%]   .ng2-dropdown-button[_ngcontent-%COMP%]{border:none;min-width:40px;width:40px;border-radius:100%;transition:all .2s;text-align:center;height:40px;padding:.5em}.ng2-dropdown-button--icon[_nghost-%COMP%]   .ng2-dropdown-button[_ngcontent-%COMP%]:active, .ng2-dropdown-button--icon   [_nghost-%COMP%]   .ng2-dropdown-button[_ngcontent-%COMP%]:active{background:rgba(0,0,0,.2)}\"]\n  });\n  return Ng2DropdownButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst KEYS = {\n  BACKSPACE: 9,\n  PREV: 38,\n  NEXT: 40,\n  ENTER: 13,\n  ESCAPE: 27\n};\n/**\n * @name onSwitchNext\n * @param index\n * @param items\n * @param state\n */\n\nconst onSwitchNext = (index, items, state) => {\n  if (index < items.length - 1) {\n    state.select(items[index + 1], true);\n  }\n};\n/**\n * @name onSwitchPrev\n * @param index\n * @param items\n * @param state\n */\n\n\nconst onSwitchPrev = (index, items, state) => {\n  if (index > 0) {\n    state.select(items[index - 1], true);\n  }\n};\n/**\n * @name onBackspace\n * @param index\n * @param items\n * @param state\n */\n\n\nconst onBackspace = (index, items, state) => {\n  if (index < items.length - 1) {\n    state.select(items[index + 1], true);\n  } else {\n    state.select(items[0], true);\n  }\n};\n\nfunction onEscape() {\n  this.hide();\n}\n\n;\n/**\n * @name onItemClicked\n * @param index\n * @param items\n * @param state\n */\n\nconst onItemClicked = (index, items, state) => {\n  return state.selectedItem ? state.selectedItem.click() : undefined;\n};\n\nconst ACTIONS = {\n  [KEYS.BACKSPACE]: onBackspace,\n  [KEYS.PREV]: onSwitchPrev,\n  [KEYS.NEXT]: onSwitchNext,\n  [KEYS.ENTER]: onItemClicked,\n  [KEYS.ESCAPE]: onEscape\n};\n\nfunction arrowKeysHandler(event) {\n  if ([38, 40].indexOf(event.keyCode) > -1) {\n    event.preventDefault();\n  }\n}\n\nclass Ng2DropdownState {\n  constructor() {\n    this.onItemSelected = new EventEmitter();\n    this.onItemClicked = new EventEmitter();\n    this.onItemDestroyed = new EventEmitter();\n  }\n  /**\n   * @name selectedItem\n   * @desc getter for _selectedItem\n   */\n\n\n  get selectedItem() {\n    return this._selectedItem;\n  }\n  /**\n   * @name selects a menu item and emits event\n   * @param item\n   */\n\n\n  select(item, dispatchEvent = true) {\n    this._selectedItem = item;\n\n    if (!dispatchEvent || !item) {\n      return;\n    }\n\n    item.focus();\n    this.onItemSelected.emit(item);\n  }\n  /**\n   * @name unselect\n   * @desc sets _selectedItem as undefined\n   */\n\n\n  unselect() {\n    this._selectedItem = undefined;\n  }\n\n}\n\nlet DropdownStateService = /*#__PURE__*/(() => {\n  class DropdownStateService {\n    constructor() {\n      this.menuState = {\n        isVisible: false,\n\n        toString() {\n          return this.isVisible === true ? 'visible' : 'hidden';\n        }\n\n      };\n      this.dropdownState = new Ng2DropdownState();\n    }\n\n  }\n\n  DropdownStateService.ɵfac = function DropdownStateService_Factory(t) {\n    return new (t || DropdownStateService)();\n  };\n\n  DropdownStateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DropdownStateService,\n    factory: DropdownStateService.ɵfac\n  });\n  return DropdownStateService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Ng2MenuItem = /*#__PURE__*/(() => {\n  class Ng2MenuItem {\n    constructor(state, element) {\n      this.state = state;\n      this.element = element;\n      /**\n       * @preventClose\n       * @desc if true, clicking on the item won't close the dropdown\n       */\n\n      this.preventClose = false;\n    }\n\n    ngOnDestroy() {\n      this.state.dropdownState.onItemDestroyed.emit(this);\n    }\n    /**\n     * @name isSelected\n     * @desc returns current selected item\n     */\n\n\n    get isSelected() {\n      return this === this.state.dropdownState.selectedItem;\n    }\n    /**\n     * @name click\n     * @desc emits select event\n     */\n\n\n    select($event) {\n      this.state.dropdownState.select(this, true);\n\n      if ($event) {\n        $event.stopPropagation();\n        $event.preventDefault();\n      }\n    }\n    /**\n     * @name click\n     * @desc emits click event\n     */\n\n\n    click() {\n      this.state.dropdownState.onItemClicked.emit(this);\n    }\n    /**\n     * @name focus\n     */\n\n\n    focus() {\n      this.element.nativeElement.children[0].focus();\n    }\n\n  }\n\n  Ng2MenuItem.ɵfac = function Ng2MenuItem_Factory(t) {\n    return new (t || Ng2MenuItem)(i0.ɵɵdirectiveInject(DropdownStateService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  Ng2MenuItem.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Ng2MenuItem,\n    selectors: [[\"ng2-menu-item\"]],\n    inputs: {\n      preventClose: \"preventClose\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[\"role\", \"button\", \"tabindex\", \"0\", 1, \"ng2-menu-item\", 3, \"keydown.enter\", \"click\", \"mouseover\"]],\n    template: function Ng2MenuItem_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"keydown.enter\", function Ng2MenuItem_Template_div_keydown_enter_0_listener() {\n          return ctx.click();\n        })(\"click\", function Ng2MenuItem_Template_div_click_0_listener() {\n          return ctx.click();\n        })(\"mouseover\", function Ng2MenuItem_Template_div_mouseover_0_listener() {\n          return ctx.select();\n        });\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ng2-menu-item--selected\", ctx.isSelected);\n      }\n    },\n    styles: [\".ng2-menu-item[_ngcontent-%COMP%]{font-family:Roboto,Helvetica Neue,Helvetica,Arial;background:#fff;color:#000000de;cursor:pointer;font-size:.9em;text-transform:none;font-weight:400;letter-spacing:.03em;height:48px;line-height:48px;padding:.3em 1.25rem;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;transition:background .25s}.ng2-menu-item--selected[_ngcontent-%COMP%]{background:rgba(158,158,158,.2);outline:0}.ng2-menu-item[_ngcontent-%COMP%]:focus{outline:0}.ng2-menu-item[_ngcontent-%COMP%]:active{background:rgba(158,158,158,.4)}ng2-menu-item[_nghost-%COMP%]     [ng2-menu-item-icon]{vertical-align:middle;font-size:28px;width:1.5em;height:30px;color:#00000070}\"]\n  });\n  return Ng2MenuItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Ng2DropdownMenu = /*#__PURE__*/(() => {\n  class Ng2DropdownMenu {\n    constructor(dropdownState, element, renderer) {\n      this.dropdownState = dropdownState;\n      this.element = element;\n      this.renderer = renderer;\n      /**\n       * @name width\n       */\n\n      this.width = 4;\n      /**\n       * @description if set to true, the first element of the dropdown will be automatically focused\n       * @name focusFirstElement\n       */\n\n      this.focusFirstElement = true;\n      /**\n       * @name appendToBody\n       */\n\n      this.appendToBody = true;\n      /**\n       * @name zIndex\n       */\n\n      this.zIndex = 1000;\n      this.listeners = {\n        arrowHandler: undefined,\n        handleKeypress: undefined\n      };\n    }\n    /**\n     * @name show\n     * @shows menu and selects first item\n     */\n\n\n    show(position, dynamic = true) {\n      const dc = typeof document !== 'undefined' ? document : undefined;\n      const wd = typeof window !== 'undefined' ? window : undefined;\n\n      if (!this.dropdownState.menuState.isVisible) {\n        // setting handlers\n        this.listeners.handleKeypress = this.renderer.listen(dc.body, 'keydown', this.handleKeypress.bind(this));\n        this.listeners.arrowHandler = this.renderer.listen(wd, 'keydown', arrowKeysHandler);\n      } // update state\n\n\n      this.dropdownState.menuState.isVisible = true;\n\n      if (position) {\n        this.updatePosition(position, dynamic);\n      }\n    }\n    /**\n     * @name hide\n     * @desc hides menu\n     */\n\n\n    hide() {\n      this.dropdownState.menuState.isVisible = false; // reset selected item state\n\n      this.dropdownState.dropdownState.unselect(); // call function to unlisten\n\n      this.listeners.arrowHandler && this.listeners.arrowHandler();\n      this.listeners.handleKeypress && this.listeners.handleKeypress();\n    }\n    /**\n     * @name updatePosition\n     * @desc updates the menu position every time it is toggled\n     * @param position {ClientRect}\n     * @param dynamic {boolean}\n     */\n\n\n    updatePosition(position, dynamic) {\n      this.position = position;\n      this.updateOnChange(dynamic);\n    }\n    /**\n     * @name handleKeypress\n     * @desc executes functions on keyPress based on the key pressed\n     * @param $event\n     */\n\n\n    handleKeypress($event) {\n      const key = $event.keyCode;\n      const items = this.items.toArray();\n      const index = items.indexOf(this.dropdownState.dropdownState.selectedItem);\n\n      if (!ACTIONS.hasOwnProperty(key)) {\n        return;\n      }\n\n      ACTIONS[key].call(this, index, items, this.dropdownState.dropdownState);\n    }\n    /**\n     * @name getMenuElement\n     */\n\n\n    getMenuElement() {\n      return this.element.nativeElement.children[0];\n    }\n    /**\n     * @name calcPositionOffset\n     * @param position\n     */\n\n\n    calcPositionOffset(position) {\n      const wd = typeof window !== 'undefined' ? window : undefined;\n      const dc = typeof document !== 'undefined' ? document : undefined;\n\n      if (!wd || !dc || !position) {\n        return;\n      }\n\n      const element = this.getMenuElement();\n      const supportPageOffset = wd.pageXOffset !== undefined;\n      const isCSS1Compat = (dc.compatMode || '') === 'CSS1Compat';\n      const x = supportPageOffset ? wd.pageXOffset : isCSS1Compat ? dc.documentElement.scrollLeft : dc.body.scrollLeft;\n      const y = supportPageOffset ? wd.pageYOffset : isCSS1Compat ? dc.documentElement.scrollTop : dc.body.scrollTop;\n      let {\n        top,\n        left\n      } = this.applyOffset(`${position.top + (this.appendToBody ? y - 15 : 0)}px`, `${position.left + x - 5}px`);\n      const clientWidth = element.clientWidth;\n      const clientHeight = element.clientHeight;\n      const marginFromBottom = parseInt(top) + clientHeight + (this.appendToBody ? 0 : y - 15);\n      const marginFromRight = parseInt(left) + clientWidth;\n      const windowScrollHeight = wd.innerHeight + wd.scrollY;\n      const windowScrollWidth = wd.innerWidth + wd.scrollX;\n\n      if (marginFromBottom >= windowScrollHeight) {\n        top = `${parseInt(top.replace('px', '')) - clientHeight}px`;\n      }\n\n      if (marginFromRight >= windowScrollWidth) {\n        const marginRight = marginFromRight - windowScrollWidth + 30;\n        left = `${parseInt(left.replace('px', '')) - marginRight}px`;\n      }\n\n      return {\n        top,\n        left\n      };\n    }\n\n    applyOffset(top, left) {\n      if (!this.offset) {\n        return {\n          top,\n          left\n        };\n      }\n\n      const offset = this.offset.split(' ');\n\n      if (!offset[1]) {\n        offset[1] = '0';\n      }\n\n      top = `${parseInt(top.replace('px', '')) + parseInt(offset[0])}px`;\n      left = `${parseInt(left.replace('px', '')) + parseInt(offset[1])}px`;\n      return {\n        top,\n        left\n      };\n    }\n\n    ngOnInit() {\n      const dc = typeof document !== 'undefined' ? document : undefined;\n\n      if (this.appendToBody) {\n        // append menu element to the body\n        dc.body.appendChild(this.element.nativeElement);\n      }\n    }\n\n    updateOnChange(dynamic = true) {\n      const element = this.getMenuElement();\n      const position = this.calcPositionOffset(this.position);\n\n      if (position) {\n        this.renderer.setStyle(element, 'top', position.top.toString());\n        this.renderer.setStyle(element, 'left', position.left.toString());\n      } // select first item unless user disabled this option\n\n\n      if (this.focusFirstElement && this.items.first && !this.dropdownState.dropdownState.selectedItem) {\n        this.dropdownState.dropdownState.select(this.items.first, false);\n      }\n    }\n\n    ngOnDestroy() {\n      const elem = this.element.nativeElement;\n      elem.parentNode.removeChild(elem);\n\n      if (this.listeners.handleKeypress) {\n        this.listeners.handleKeypress();\n      }\n    }\n\n  }\n\n  Ng2DropdownMenu.ɵfac = function Ng2DropdownMenu_Factory(t) {\n    return new (t || Ng2DropdownMenu)(i0.ɵɵdirectiveInject(DropdownStateService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  Ng2DropdownMenu.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Ng2DropdownMenu,\n    selectors: [[\"ng2-dropdown-menu\"]],\n    contentQueries: function Ng2DropdownMenu_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, Ng2MenuItem, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    inputs: {\n      width: \"width\",\n      focusFirstElement: \"focusFirstElement\",\n      offset: \"offset\",\n      appendToBody: \"appendToBody\",\n      zIndex: \"zIndex\"\n    },\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 12,\n    consts: [[1, \"ng2-dropdown-menu__options-container\"], [\"class\", \"ng2-dropdown-backdrop\", 3, \"click\", 4, \"ngIf\"], [1, \"ng2-dropdown-backdrop\", 3, \"click\"]],\n    template: function Ng2DropdownMenu_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(3, Ng2DropdownMenu_div_3_Template, 1, 0, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMapInterpolate1(\"ng2-dropdown-menu ng2-dropdown-menu---width--\", ctx.width, \"\");\n        i0.ɵɵstyleProp(\"z-index\", ctx.zIndex);\n        i0.ɵɵclassProp(\"ng2-dropdown-menu--inside-element\", !ctx.appendToBody)(\"ng2-dropdown-menu--open\", ctx.dropdownState.menuState.isVisible);\n        i0.ɵɵproperty(\"@fade\", ctx.dropdownState.menuState.toString());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"@opacity\", ctx.dropdownState.menuState.toString());\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.dropdownState.menuState.isVisible);\n      }\n    },\n    dependencies: [i1.NgIf],\n    styles: [\"[_nghost-%COMP%]{display:block}.ng2-dropdown-menu[_ngcontent-%COMP%]{overflow-y:auto;box-shadow:0 1px 2px #0000004d;position:absolute;padding:.5em 0;background:#fff;border-radius:1px;max-height:400px;width:260px;min-height:0;display:block}.ng2-dropdown-menu.ng2-dropdown-menu--inside-element[_ngcontent-%COMP%]{position:fixed}.ng2-dropdown-menu.ng2-dropdown-menu--width--2[_ngcontent-%COMP%]{width:200px}.ng2-dropdown-menu.ng2-dropdown-menu--width--4[_ngcontent-%COMP%]{width:260px}.ng2-dropdown-menu.ng2-dropdown-menu--width--6[_ngcontent-%COMP%]{width:320px}.ng2-dropdown-backdrop[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1;overflow:hidden}[_nghost-%COMP%]     .ng2-menu-divider{height:1px;min-height:1px;max-height:1px;width:100%;display:block;background:#f9f9f9}\"],\n    data: {\n      animation: [trigger('fade', [state('visible', style({\n        opacity: 1,\n        height: '*',\n        width: '*'\n      })), state('hidden', style({\n        opacity: 0,\n        overflow: 'hidden',\n        height: 0,\n        width: 0\n      })), transition('hidden => visible', [animate('250ms ease-in', style({\n        opacity: 1,\n        height: '*',\n        width: '*'\n      }))]), transition('visible => hidden', [animate('350ms ease-out', style({\n        opacity: 0,\n        width: 0,\n        height: 0\n      }))])]), trigger('opacity', [transition('hidden => visible', [animate('450ms ease-in', keyframes([style({\n        opacity: 0,\n        offset: 0\n      }), style({\n        opacity: 1,\n        offset: 1\n      })]))]), transition('visible => hidden', [animate('250ms ease-out', keyframes([style({\n        opacity: 1,\n        offset: 0\n      }), style({\n        opacity: 0.5,\n        offset: 0.3\n      }), style({\n        opacity: 0,\n        offset: 1\n      })]))])])]\n    }\n  });\n  return Ng2DropdownMenu;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Ng2Dropdown = /*#__PURE__*/(() => {\n  class Ng2Dropdown {\n    constructor(state) {\n      this.state = state;\n      this.dynamicUpdate = true; // outputs\n\n      this.onItemClicked = new EventEmitter();\n      this.onItemSelected = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.state.dropdownState.onItemClicked.subscribe(item => {\n        this.onItemClicked.emit(item);\n\n        if (item.preventClose) {\n          return;\n        }\n\n        this.hide.call(this);\n      });\n\n      if (this.button) {\n        this.button.onMenuToggled.subscribe(() => {\n          this.toggleMenu();\n        });\n      }\n\n      this.state.dropdownState.onItemSelected.subscribe(item => {\n        this.onItemSelected.emit(item);\n      });\n      this.state.dropdownState.onItemDestroyed.subscribe(item => {\n        let newSelectedItem;\n        const items = this.menu.items.toArray();\n\n        if (item !== this.state.dropdownState.selectedItem) {\n          return;\n        }\n\n        if (this.menu.focusFirstElement) {\n          newSelectedItem = item === items[0] && items.length > 1 ? items[1] : items[0];\n        }\n\n        this.state.dropdownState.select(newSelectedItem);\n      });\n    }\n    /**\n     * @name toggleMenu\n     * @desc toggles menu visibility\n     */\n\n\n    toggleMenu(position = this.button.getPosition()) {\n      this.state.menuState.isVisible ? this.hide() : this.show(position);\n    }\n    /**\n     * - hides dropdown\n     * @name hide\n     */\n\n\n    hide() {\n      this.menu.hide();\n      this.onHide.emit(this);\n    }\n    /**\n     * - shows dropdown\n     * @name show\n     * @param position\n     */\n\n\n    show(position = this.button.getPosition()) {\n      this.menu.show(position, this.dynamicUpdate);\n      this.onShow.emit(this);\n    }\n    /**\n     * @name scrollListener\n     */\n\n\n    scrollListener() {\n      if (this.button && this.dynamicUpdate) {\n        this.menu.updatePosition(this.button.getPosition(), true);\n      }\n    }\n\n  }\n\n  Ng2Dropdown.ɵfac = function Ng2Dropdown_Factory(t) {\n    return new (t || Ng2Dropdown)(i0.ɵɵdirectiveInject(DropdownStateService));\n  };\n\n  Ng2Dropdown.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Ng2Dropdown,\n    selectors: [[\"ng2-dropdown\"]],\n    contentQueries: function Ng2Dropdown_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, Ng2DropdownButton, 7);\n        i0.ɵɵcontentQuery(dirIndex, Ng2DropdownMenu, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.button = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menu = _t.first);\n      }\n    },\n    hostBindings: function Ng2Dropdown_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"scroll\", function Ng2Dropdown_scroll_HostBindingHandler() {\n          return ctx.scrollListener();\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      dynamicUpdate: \"dynamicUpdate\"\n    },\n    outputs: {\n      onItemClicked: \"onItemClicked\",\n      onItemSelected: \"onItemSelected\",\n      onShow: \"onShow\",\n      onHide: \"onHide\"\n    },\n    features: [i0.ɵɵProvidersFeature([DropdownStateService])],\n    ngContentSelectors: _c2,\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"ng2-dropdown-container\"]],\n    template: function Ng2Dropdown_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c1);\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵprojection(2, 1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return Ng2Dropdown;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Ng2DropdownModule = /*#__PURE__*/(() => {\n  class Ng2DropdownModule {}\n\n  Ng2DropdownModule.ɵfac = function Ng2DropdownModule_Factory(t) {\n    return new (t || Ng2DropdownModule)();\n  };\n\n  Ng2DropdownModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: Ng2DropdownModule\n  });\n  Ng2DropdownModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return Ng2DropdownModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DropdownStateService, Ng2Dropdown, Ng2DropdownButton, Ng2DropdownMenu, Ng2DropdownModule, Ng2MenuItem }; //# sourceMappingURL=ng2-material-dropdown.mjs.map","map":null,"metadata":{},"sourceType":"module"}