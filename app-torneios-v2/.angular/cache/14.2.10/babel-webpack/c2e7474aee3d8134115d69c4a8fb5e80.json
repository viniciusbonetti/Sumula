{"ast":null,"code":"import { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { FormBuilder } from '@angular/forms';\nimport { PasswordValidation } from './password-validator.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/checkbox\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"./field-error-display/field-error-display.component\";\n\nfunction ValidationFormsComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ValidationFormsComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ValidationFormsComponent_mat_error_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ValidationFormsComponent_mat_error_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ValidationFormsComponent_mat_error_78_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ValidationFormsComponent_mat_error_79_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"has-success\": a0\n  };\n};\n\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n\n}\nexport let ValidationFormsComponent = /*#__PURE__*/(() => {\n  class ValidationFormsComponent {\n    constructor(formBuilder) {\n      this.formBuilder = formBuilder;\n      this.emailFormControl = new FormControl('', [Validators.required, Validators.email]);\n      this.validEmailRegister = false;\n      this.validConfirmPasswordRegister = false;\n      this.validPasswordRegister = false;\n      this.validEmailLogin = false;\n      this.validPasswordLogin = false;\n      this.validTextType = false;\n      this.validEmailType = false;\n      this.validNumberType = false;\n      this.validUrlType = false;\n      this.pattern = \"https?://.+\";\n      this.validSourceType = false;\n      this.validDestinationType = false;\n      this.matcher = new MyErrorStateMatcher();\n    }\n\n    isFieldValid(form, field) {\n      return !form.get(field).valid && form.get(field).touched;\n    }\n\n    displayFieldCss(form, field) {\n      return {\n        'has-error': this.isFieldValid(form, field),\n        'has-feedback': this.isFieldValid(form, field)\n      };\n    }\n\n    onRegister() {\n      if (this.register.valid) {} else {\n        this.validateAllFormFields(this.register);\n      }\n    }\n\n    onLogin() {\n      if (this.login.valid) {} else {\n        this.validateAllFormFields(this.login);\n      }\n    }\n\n    onType() {\n      if (this.type.valid) {} else {\n        this.validateAllFormFields(this.type);\n      }\n    }\n\n    validateAllFormFields(formGroup) {\n      Object.keys(formGroup.controls).forEach(field => {\n        const control = formGroup.get(field);\n\n        if (control instanceof FormControl) {\n          control.markAsTouched({\n            onlySelf: true\n          });\n        } else if (control instanceof FormGroup) {\n          this.validateAllFormFields(control);\n        }\n      });\n    }\n\n    ngOnInit() {\n      this.register = this.formBuilder.group({\n        // To add a validator, we must first convert the string value into an array. The first item in the array is the default value if any, then the next item in the array is the validator. Here we are adding a required validator meaning that the firstName attribute must have a value in it.\n        email: [null, [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n        // We can use more than one validator per field. If we want to use more than one validator we have to wrap our array of validators with a Validators.compose function. Here we are using a required, minimum length and maximum length validator.\n        optionsCheckboxes: ['', Validators.required],\n        password: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validator: PasswordValidation.MatchPassword // your validation method\n\n      });\n      this.login = this.formBuilder.group({\n        // To add a validator, we must first convert the string value into an array. The first item in the array is the default value if any, then the next item in the array is the validator. Here we are adding a required validator meaning that the firstName attribute must have a value in it.\n        email: [null, [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n        // We can use more than one validator per field. If we want to use more than one validator we have to wrap our array of validators with a Validators.compose function. Here we are using a required, minimum length and maximum length validator.\n        password: ['', Validators.required]\n      });\n      this.type = this.formBuilder.group({\n        // To add a validator, we must first convert the string value into an array. The first item in the array is the default value if any, then the next item in the array is the validator. Here we are adding a required validator meaning that the firstName attribute must have a value in it.\n        text: [null, Validators.required],\n        email: [null, [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n        number: [null, Validators.required],\n        url: [null, Validators.required],\n        // We can use more than one validator per field. If we want to use more than one validator we have to wrap our array of validators with a Validators.compose function. Here we are using a required, minimum length and maximum length validator.\n        password: ['', Validators.required],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validator: PasswordValidation.MatchPassword // your validation method\n\n      });\n    }\n\n    emailValidationRegister(e) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (re.test(String(e).toLowerCase())) {\n        this.validEmailRegister = true;\n      } else {\n        this.validEmailRegister = false;\n      }\n    }\n\n    passwordValidationRegister(e) {\n      if (e.length > 5) {\n        this.validPasswordRegister = true;\n      } else {\n        this.validPasswordRegister = false;\n      }\n    }\n\n    confirmPasswordValidationRegister(e) {\n      if (this.register.controls['password'].value === e) {\n        this.validConfirmPasswordRegister = true;\n      } else {\n        this.validConfirmPasswordRegister = false;\n      }\n    }\n\n    emailValidationLogin(e) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (re.test(String(e).toLowerCase())) {\n        this.validEmailLogin = true;\n      } else {\n        this.validEmailLogin = false;\n      }\n    }\n\n    passwordValidationLogin(e) {\n      if (e.length > 5) {\n        this.validPasswordLogin = true;\n      } else {\n        this.validPasswordLogin = false;\n      }\n    }\n\n    textValidationType(e) {\n      if (e) {\n        this.validTextType = true;\n      } else {\n        this.validTextType = false;\n      }\n    }\n\n    emailValidationType(e) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (re.test(String(e).toLowerCase())) {\n        this.validEmailType = true;\n      } else {\n        this.validEmailType = false;\n      }\n    }\n\n    numberValidationType(e) {\n      if (e) {\n        this.validNumberType = true;\n      } else {\n        this.validNumberType = false;\n      }\n    }\n\n    urlValidationType(e) {\n      try {\n        new URL(e);\n        this.validUrlType = true;\n      } catch (_) {\n        this.validUrlType = false;\n      }\n    }\n\n    sourceValidationType(e) {\n      if (e) {\n        this.validSourceType = true;\n      } else {\n        this.validSourceType = false;\n      }\n    }\n\n    confirmDestinationValidationType(e) {\n      if (this.type.controls['password'].value === e) {\n        this.validDestinationType = true;\n      } else {\n        this.validDestinationType = false;\n      }\n    }\n\n  }\n\n  ValidationFormsComponent.ɵfac = function ValidationFormsComponent_Factory(t) {\n    return new (t || ValidationFormsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n\n  ValidationFormsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ValidationFormsComponent,\n    selectors: [[\"app-validationforms-cmp\"]],\n    decls: 120,\n    vars: 60,\n    consts: [[1, \"main-content\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"card\"], [3, \"formGroup\"], [1, \"card-header\", \"card-header-rose\", \"card-header-icon\"], [1, \"card-icon\"], [1, \"material-icons\"], [1, \"card-title\"], [1, \"card-body\"], [1, \"example-full-width\", 3, \"ngClass\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Email Address\", \"formControlName\", \"email\", 3, \"errorStateMatcher\", \"ngModelChange\"], [4, \"ngIf\"], [1, \"example-full-width\", \"has-label\", 3, \"ngClass\"], [\"type\", \"password\", \"matInput\", \"\", \"id\", \"password\", \"placeholder\", \"Password *\", \"formControlName\", \"password\", 3, \"ngModelChange\"], [\"errorMsg\", \"Enter a valid password.\", 3, \"displayError\"], [\"type\", \"password\", \"matInput\", \"\", \"id\", \"confirmPassword\", \"placeholder\", \"Confirm Password\", \"formControlName\", \"confirmPassword\", 3, \"ngModelChange\"], [\"errorMsg\", \"These passwords don't match. Try again!\", 3, \"displayError\"], [1, \"category\", \"form-category\"], [1, \"card-footer\", \"text-right\"], [1, \"example-margin\", \"mb-0\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 1, \"btn\", \"btn-rose\", 3, \"click\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password\", \"formControlName\", \"password\", 3, \"ngModelChange\"], [1, \"form-group\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 1, \"btn\", \"btn-rose\", \"btn-fill\", \"btn-wd\", 3, \"click\"], [1, \"col-md-12\"], [1, \"form-horizontal\", 3, \"formGroup\"], [1, \"card-header\", \"card-header-rose\", \"card-header-text\"], [1, \"card-text\"], [1, \"col-sm-2\", \"col-form-label\"], [1, \"col-sm-7\"], [\"type\", \"text\", \"matInput\", \"\", \"id\", \"text\", \"formControlName\", \"text\", 3, \"ngModelChange\"], [\"errorMsg\", \"Required text\", 3, \"displayError\"], [1, \"col-sm-3\", \"label-on-right\"], [\"type\", \"email\", \"matInput\", \"\", \"formControlName\", \"email\", 3, \"errorStateMatcher\", \"ngModelChange\"], [\"type\", \"number\", \"name\", \"number\", \"number\", \"true\", \"matInput\", \"\", \"formControlName\", \"number\", 3, \"ngModelChange\"], [\"errorMsg\", \"Add a number!\", 3, \"displayError\"], [\"type\", \"text\", \"id\", \"url\", \"pattern\", \"https?://.+\", \"name\", \"url\", \"formControlName\", \"url\", \"matInput\", \"\", 3, \"ngModelChange\"], [\"errorMsg\", \"Must be a valid URL!\", 3, \"displayError\"], [1, \"col-sm-3\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"#idSource\", \"name\", \"idSource\", \"formControlName\", \"password\", 3, \"ngModelChange\"], [\"errorMsg\", \"IdSource is required\", 3, \"displayError\"], [\"type\", \"text\", \"matInput\", \"\", \"name\", \"idDestination\", \"placeholder\", \"#idDestination\", \"formControlName\", \"confirmPassword\", 3, \"ngModelChange\"], [\"errorMsg\", \" IdSource mismatch!\", 3, \"displayError\"], [1, \"col-sm-4\", \"label-on-right\"], [1, \"card-footer\", \"text-center\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 1, \"btn\", \"btn-rose\", \"btn-fill\", 3, \"click\"]],\n    template: function ValidationFormsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"form\", 5)(6, \"div\", 6)(7, \"div\", 7)(8, \"i\", 8);\n        i0.ɵɵtext(9, \"mail_outline\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"h4\", 9);\n        i0.ɵɵtext(11, \"Register Form\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 10)(13, \"mat-form-field\", 11)(14, \"input\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_14_listener($event) {\n          return ctx.emailValidationRegister($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, ValidationFormsComponent_mat_error_15_Template, 2, 0, \"mat-error\", 13);\n        i0.ɵɵtemplate(16, ValidationFormsComponent_mat_error_16_Template, 4, 0, \"mat-error\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-form-field\", 14)(18, \"input\", 15);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_18_listener($event) {\n          return ctx.passwordValidationRegister($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"app-field-error-display\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-form-field\", 14)(21, \"input\", 17);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_21_listener($event) {\n          return ctx.confirmPasswordValidationRegister($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"app-field-error-display\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 19);\n        i0.ɵɵtext(24, \"* Required fields\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"div\", 20)(26, \"mat-checkbox\", 21);\n        i0.ɵɵtext(27, \"Subscribe to newsletter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(28, \"br\");\n        i0.ɵɵelementStart(29, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function ValidationFormsComponent_Template_button_click_29_listener() {\n          return ctx.onRegister();\n        });\n        i0.ɵɵtext(30, \"Register\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(31, \"div\", 3)(32, \"div\", 4)(33, \"form\", 5)(34, \"div\", 6)(35, \"div\", 7)(36, \"i\", 8);\n        i0.ɵɵtext(37, \"contacts\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(38, \"h4\", 9);\n        i0.ɵɵtext(39, \"Login Form\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(40, \"div\", 10)(41, \"mat-form-field\", 11)(42, \"input\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_42_listener($event) {\n          return ctx.emailValidationLogin($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(43, ValidationFormsComponent_mat_error_43_Template, 2, 0, \"mat-error\", 13);\n        i0.ɵɵtemplate(44, ValidationFormsComponent_mat_error_44_Template, 4, 0, \"mat-error\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"mat-form-field\", 11)(46, \"input\", 23);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_46_listener($event) {\n          return ctx.passwordValidationLogin($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(47, \"app-field-error-display\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"div\", 19);\n        i0.ɵɵtext(49, \"* Required fields\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(50, \"div\", 20)(51, \"div\", 24)(52, \"button\", 25);\n        i0.ɵɵlistener(\"click\", function ValidationFormsComponent_Template_button_click_52_listener() {\n          return ctx.onLogin();\n        });\n        i0.ɵɵtext(53, \"Login\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(54, \"div\", 26)(55, \"div\", 4)(56, \"form\", 27)(57, \"div\", 28)(58, \"div\", 29)(59, \"h4\", 9);\n        i0.ɵɵtext(60, \"Type Validation\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(61, \"div\", 10)(62, \"div\", 2)(63, \"label\", 30);\n        i0.ɵɵtext(64, \"Required Text\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(65, \"div\", 31)(66, \"mat-form-field\", 14)(67, \"input\", 32);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_67_listener($event) {\n          return ctx.textValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(68, \"app-field-error-display\", 33);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(69, \"label\", 34)(70, \"code\");\n        i0.ɵɵtext(71, \"required\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(72, \"div\", 2)(73, \"label\", 30);\n        i0.ɵɵtext(74, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(75, \"div\", 31)(76, \"mat-form-field\", 11)(77, \"input\", 35);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_77_listener($event) {\n          return ctx.emailValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(78, ValidationFormsComponent_mat_error_78_Template, 2, 0, \"mat-error\", 13);\n        i0.ɵɵtemplate(79, ValidationFormsComponent_mat_error_79_Template, 4, 0, \"mat-error\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(80, \"label\", 34)(81, \"code\");\n        i0.ɵɵtext(82, \"email=\\\"true\\\"\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(83, \"div\", 2)(84, \"label\", 30);\n        i0.ɵɵtext(85, \"Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(86, \"div\", 31)(87, \"mat-form-field\", 14)(88, \"input\", 36);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_88_listener($event) {\n          return ctx.numberValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(89, \"app-field-error-display\", 37);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(90, \"label\", 34)(91, \"code\");\n        i0.ɵɵtext(92, \"number=\\\"true\\\"\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(93, \"div\", 2)(94, \"label\", 30);\n        i0.ɵɵtext(95, \"Url\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(96, \"div\", 31)(97, \"mat-form-field\", 14)(98, \"input\", 38);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_98_listener($event) {\n          return ctx.urlValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(99, \"app-field-error-display\", 39);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(100, \"label\", 34)(101, \"code\");\n        i0.ɵɵtext(102, \"url=\\\"true\\\"\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(103, \"div\", 2)(104, \"label\", 30);\n        i0.ɵɵtext(105, \"Equal to\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(106, \"div\", 40)(107, \"mat-form-field\", 11)(108, \"input\", 41);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_108_listener($event) {\n          return ctx.sourceValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(109, \"app-field-error-display\", 42);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(110, \"div\", 40)(111, \"mat-form-field\", 11)(112, \"input\", 43);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_112_listener($event) {\n          return ctx.confirmDestinationValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(113, \"app-field-error-display\", 44);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(114, \"label\", 45)(115, \"code\");\n        i0.ɵɵtext(116, \"equalTo=\\\"#idSource\\\"\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(117, \"div\", 46)(118, \"button\", 47);\n        i0.ɵɵlistener(\"click\", function ValidationFormsComponent_Template_button_click_118_listener() {\n          return ctx.onType();\n        });\n        i0.ɵɵtext(119, \"Validate Inputs\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.register);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(38, _c0, ctx.validEmailRegister === true));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"errorStateMatcher\", ctx.matcher);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"email\") && !ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(40, _c0, ctx.validPasswordRegister === true));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.register, \"password\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(42, _c0, ctx.validConfirmPasswordRegister === true))(\"ngClass\", ctx.displayFieldCss(ctx.register, \"password\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.register, \"confirmPassword\"));\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"formGroup\", ctx.login);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(44, _c0, ctx.validEmailLogin === true));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"errorStateMatcher\", ctx.matcher);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"email\") && !ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(46, _c0, ctx.validPasswordLogin === true))(\"ngClass\", ctx.displayFieldCss(ctx.login, \"password\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.login, \"password\"));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"formGroup\", ctx.type);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(48, _c0, ctx.validTextType === true))(\"ngClass\", ctx.displayFieldCss(ctx.type, \"text\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.type, \"text\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(50, _c0, ctx.validEmailType === true));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"errorStateMatcher\", ctx.matcher);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"email\") && !ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(52, _c0, ctx.validNumberType === true))(\"ngClass\", ctx.displayFieldCss(ctx.type, \"number\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.type, \"number\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(54, _c0, ctx.validUrlType === true))(\"ngClass\", ctx.displayFieldCss(ctx.type, \"url\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.type, \"url\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(56, _c0, ctx.validSourceType === true))(\"ngClass\", ctx.displayFieldCss(ctx.type, \"password\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.type, \"password\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(58, _c0, ctx.validDestinationType === true))(\"ngClass\", ctx.displayFieldCss(ctx.type, \"confirmPassword\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.type, \"confirmPassword\"));\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.PatternValidator, i1.FormGroupDirective, i1.FormControlName, i3.MatCheckbox, i4.MatError, i4.MatFormField, i5.MatInput, i6.MatButton, i7.FieldErrorDisplayComponent],\n    encapsulation: 2\n  });\n  return ValidationFormsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}